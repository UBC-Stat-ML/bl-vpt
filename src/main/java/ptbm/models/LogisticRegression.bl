package ptbm.models

import glms.DotProduct
import ptbm.VariationalReal
import static extension ptbm.StaticUtils.*


model LogisticRegression {
    
  param GlobalDataSource data
  param Plate<String> instances, features
  param Boolean useTPrior ?: true
  
  param Plated<Double> covariates
  random Plated<VariationalReal> parameters
  random Plated<IntVar> labels
  
  random VariationalReal sigma ?: unconstrainedLatentReal
  random VariationalReal intercept ?: unconstrainedLatentReal
  
  laws {
    
    for (Index<String> instance : instances.indices) {
      labels.get(instance) | intercept, DotProduct dotProduct = DotProduct.of(features, parameters, covariates.slice(instance))
        ~ Bernoulli(logistic(intercept + dotProduct.compute))
    }
    
    for (Index<String> feature : features.indices) {
      parameters.get(feature) | sigma, RealDistribution prior = if (useTPrior) HalfStudentT::distribution(1, 5) else Normal::distribution(0, 5 * 5)
       ~ Opt(prior)
    }
    intercept | sigma, RealDistribution prior = if (useTPrior) HalfStudentT::distribution(1, 5) else Normal::distribution(0, 5 * 5)
       ~ Opt(prior)
        
    sigma ~ Opt(Exponential::distribution(1.0))
    
  }
}