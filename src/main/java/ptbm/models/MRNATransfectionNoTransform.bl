package ptbm.models

import static extension ptbm.StaticUtils.*
import ptbm.VariationalReal

model MRNATransfectionNoTransform {
  
  param GlobalDataSource data
  
  random VariationalReal
    km0 ?: unconstrainedLatentReal,
    delta ?: unconstrainedLatentReal,
    beta ?: unconstrainedLatentReal,
    t0 ?: unconstrainedLatentReal,
    sigma ?: unconstrainedLatentReal
    
  param Plate<Double> times 
  
  random Plated<RealVar> observations 
  
  laws {
    
    t0 ~ Opt(LogUniform::distribution(-2.0, 1.0, 10.0))
    km0 ~ Opt(LogUniform::distribution(-5.0, 5.0, 10.0))
    beta ~ Opt(LogUniform::distribution(-5.0, 5.0, 10.0))
    delta ~ Opt(LogUniform::distribution(-5.0, 5.0, 10.0))
    sigma ~ Opt(LogUniform::distribution(-2.0, 2.0, 10.0))
    
    for (Index<Double> time : times.indices) {
      observations.get(time) | Double t = time.key, km0, delta, beta, t0, sigma ~ Normal({
        val mean = km0.doubleValue / (delta.doubleValue - beta.doubleValue) * (1.0 - exp(-(delta.doubleValue - beta.doubleValue) * (t - t0.doubleValue))) * exp(-beta.doubleValue*(t - t0.doubleValue))
        if (mean.isNaN || mean == Double.NEGATIVE_INFINITY || mean == Double.POSITIVE_INFINITY)
          return 10_000 // hack: priors too vague but keeping them for replication
        return mean
      }, 
      sigma.doubleValue * sigma.doubleValue)   
    }
    
  }
}