package ptbm.models

import static extension ptbm.StaticUtils.*
import ptbm.VariationalReal

model CollapsedHierarchicalRockets {
  param GlobalDataSource data
  param Double vagueness ?: 10.0
  param String filter ?: ""
  param Plate<String> rocketTypes
  param Plated<IntVar> numberOfLaunches
  random Plated<IntVar> numberOfFailures
  random VariationalReal 
    p0 ?: unconstrainedLatentReal, 
    p1 ?: unconstrainedLatentReal
  
  laws {
    p0 | vagueness ~ Opt(Normal::distribution(0.0, vagueness * vagueness)) 
    p1 | vagueness ~ Opt(Normal::distribution(0.0, vagueness * vagueness)) 
    for (Index<String> rocketType : rocketTypes.indices.filter[key.startsWith(filter)]) {
      numberOfFailures.get(rocketType)
        | p0, p1,
          IntVar numberOfLaunch = numberOfLaunches.get(rocketType)
        ~ BetaBinomial(numberOfLaunch, p0.softplus, p1.softplus)
    }
  }
}